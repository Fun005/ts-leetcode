/**
 * @description æ•°ç»„è½¬ðŸŒ²
 * @author tangc1
 * @date 2022-05-03 23:54:09
*/

interface ITreeNode {
    id: number
    name: string
    children?: ITreeNode[]
}

interface IArrayItem {
    id: number
    name: string
    parentId: number
}

export function arrayToTree(arr: IArrayItem[]): ITreeNode | null {
    // id å’Œ treeNode æ˜ å°„
    const idToTreeNode: Map<number, ITreeNode> = new Map()

    let root = null

    arr.forEach(({ id, name, parentId }) => {
        // å®šä¹‰ tree node å¹¶åŠ å…¥ map
        const treeNode = { id, name }
        idToTreeNode.set(id, treeNode)

        // æ‰¾åˆ° parentId å¹¶åŠ å…¥åˆ° children
        const parentNode = idToTreeNode.get(parentId)
        if (parentNode) {
            if (parentNode.children == null) parentNode.children = []
            parentNode.children.push(treeNode)
        }

        // æ‰¾åˆ°æ ¹èŠ‚ç‚¹
        if (parentId == 0) {
            root = treeNode
        }
    })
    return root
}

const arr = [
    { id: 1, name: 'éƒ¨é—¨A', parentId: 0 }, // 0ä»£è¡¨æ— çˆ¶çº§èŠ‚ç‚¹
    { id: 2, name: 'éƒ¨é—¨B', parentId: 1 },
    { id: 3, name: 'éƒ¨é—¨C', parentId: 1 },
    { id: 4, name: 'éƒ¨é—¨D', parentId: 2 },
    { id: 5, name: 'éƒ¨é—¨E', parentId: 2 },
    { id: 6, name: 'éƒ¨é—¨F', parentId: 3 },
]

console.info(arrayToTree(arr));
